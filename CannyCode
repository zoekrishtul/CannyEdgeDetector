// ./main garb34.pgm outputmag outputpeak outputedge 1.0

#include <math.h>
#include <stdio.h> /*  Marr-Hildreth.c  (or marrh.c) */
#include <stdlib.h>
#define PICSIZE 256
#define MAXMASK 100

int pic[PICSIZE][PICSIZE];
double outpic1[PICSIZE][PICSIZE];
double outpic2[PICSIZE][PICSIZE];
double edgeflag[PICSIZE][PICSIZE];
double xmask[MAXMASK][MAXMASK];
double ymask[MAXMASK][MAXMASK];
int cand[PICSIZE][PICSIZE];
int fin[PICSIZE][PICSIZE];
int histogram[PICSIZE];

// send output
void display(FILE *fp, int arr[PICSIZE][PICSIZE]) {
  for (int i = 0; i < 256; i++) {
    for (int j = 0; j < 256; j++) {
      fprintf(fp, "%c", (char)((int)(arr[i][j])));
    }
  }
}

// PT.4
int calcHist(double percentage) {
  double percent = percentage / 100.0;
  double cutOff = percent * 256 * 256;
  int areaofTop = 0;
  int i;

  for (i = 0; i < 256; i++) {
    for (int j = 0; j < 256; j++) {
      histogram[(int)edgeflag[i][j]]++;
    }
  }
  for (i = 255; i >= 0; i--) {
    areaofTop += histogram[i];
    if (areaofTop > cutOff) {
      break;
    }
  }
  return i;
}

// file header
void fileHeader(FILE *fp, int row, int col) // rows, cols
{
  fprintf(fp, "P5\n%d %d\n255\n", row, col);
}

int main(argc, argv)
int argc;
char **argv;
{
  int i, j, p, q, s, t, mr, centx, centy;
  int rows = 256, cols = 256;
  double maskval, maskxval, maskyval, xsum, ysum, sig, maxival, slope,
      areaOfTop;
  FILE *fo1, *fo2, *fp1, *fo3, *fopen();
  char *foobar;

  // input file
  argc--;
  argv++;
  foobar = *argv;
  fp1 = fopen(foobar, "rb");

  // output 1: magnitude
  argc--;
  argv++;
  foobar = *argv;
  fo1 = fopen(foobar, "wb");

  // output 2: peaks
  argc--;
  argv++;
  foobar = *argv;
  fo2 = fopen(foobar, "wb");

  // output 3: final edges
  argc--;
  argv++;
  foobar = *argv;
  fo3 = fopen(foobar, "wb");

  // sigma
  argc--;
  argv++;
  foobar = *argv;
  sig = atof(foobar);

  // write file headers
  fileHeader(fo1, rows, cols);
  fileHeader(fo2, rows, cols);
  fileHeader(fo3, rows, cols);

  mr = (int)(sig * 3);
  centx = (MAXMASK / 2);
  centy = (MAXMASK / 2);

  // scan input
  for (i = 0; i < 256; i++) {
    for (j = 0; j < 256; j++) {
      pic[i][j] = getc(fp1);
    }
  }
  for (p = -mr; p <= mr; p++) {
    for (q = -mr; q <= mr; q++) {
      maskxval = q * exp(-1 * ((p * p) + (q * q)) / (2 * (sig * sig)));
      maskyval = p * exp(-1 * ((p * p) + (q * q)) / (2 * (sig * sig)));

      xmask[centy + p][centx + q] = maskxval;
      ymask[centy + p][centx + q] = maskyval;
    }
  }
  for (i = mr; i <= 255 - mr; i++) {
    for (j = mr; j <= 255 - mr; j++) {
      xsum = 0;
      ysum = 0;
      for (p = -mr; p <= mr; p++) {
        for (q = -mr; q <= mr; q++) {
          xsum += pic[i + p][j + q] * xmask[p + centy][q + centx];
          ysum += pic[i + p][j + q] * ymask[p + centy][q + centx];
        }
      }
      outpic1[i][j] = xsum;
      outpic2[i][j] = ysum;
    }
  }

  maxival = 0;
  for (i = mr; i < 256 - mr; i++) {
    for (j = mr; j < 256 - mr; j++) {
      edgeflag[i][j] = sqrt((double)(outpic1[i][j] * outpic1[i][j]) +
                            (double)(outpic2[i][j] * outpic2[i][j]));
      if (edgeflag[i][j] > maxival) {
        maxival = edgeflag[i][j];
      }
    }
  }
  // display magnitude
  for (i = 0; i < 256; i++) {
    for (j = 0; j < 256; j++) {
      edgeflag[i][j] = (edgeflag[i][j] / (float)maxival) * 255;
      fprintf(fo1, "%c", (char)((int)(edgeflag[i][j])));
    }
  }

  // peaks code
  for (i = mr; i < PICSIZE - mr; i++) {
    for (j = mr; j < PICSIZE - mr; j++) {
      if (outpic1[i][j] == 0.0) {
        outpic1[i][j] = 0.00001;
      }
      slope = outpic2[i][j] / outpic1[i][j];
      if ((slope <= 0.4142) && slope > -0.4142) {
        if ((edgeflag[i][j] > edgeflag[i][j - 1]) &&
            (edgeflag[i][j] > edgeflag[i][j + 1])) {
          cand[i][j] = 255;
        }
      } else if ((slope <= 2.4142) && (slope > 0.4142)) {
        if ((edgeflag[i][j] > edgeflag[i - 1][j - 1]) &&
            (edgeflag[i][j] > edgeflag[i + 1][j + 1])) {
          cand[i][j] = 255;
        }
      } else if ((slope <= -0.4142) && (slope > -2.4142)) {
        if ((edgeflag[i][j] > edgeflag[i + 1][j - 1]) &&
            (edgeflag[i][j] > edgeflag[i - 1][j + 1])) {
          cand[i][j] = 255;
        }
      } else {
        if ((edgeflag[i][j] > edgeflag[i - 1][j]) &&
            (edgeflag[i][j] > edgeflag[i + 1][j])) {
          cand[i][j] = 255;
        }
      }
    }
  }

  // display peaks
  display(fo2, cand);

  // pt.4
  i = calcHist(5.0);
  double HI = i;
  double LO = 0.35 * HI;

  for (i = 0; i < 256; i++) {
    for (j = 0; j < 256; j++) {
      fin[i][j] = 0;
      if (cand[i][j] == 255) {
        if (edgeflag[i][j] > HI) {
          cand[i][j] = 0;
          fin[i][j] = 255;
        } else if (edgeflag[i][j] < LO) {
          cand[i][j] = 0;
          fin[i][j] = 0;
        }
      }
    }
  }
  // ensure peaks
  int moretodo = 1;
  while (moretodo == 1) {
    moretodo = 0;
    for (i = 0; i < 256; i++) {
      for (j = 0; j < 256; j++) {
        if (cand[i][j] == 255) {
          for (p = -1; p <= 1; p++) {
            for (q = -1; q <= 1; q++) {
              if (fin[i + p][j + q] == 255) {
                cand[i][j] = 0;
                fin[i][j] = 255;
                moretodo = 1;
              }
            }
          }
        }
      }
    }
  }
  display(fo3, fin);
  fclose(fo1);
  fclose(fo2);
  fclose(fo3);
  fclose(fp1);
}
